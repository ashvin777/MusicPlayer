document.addSyncEventListener = function(events, callback){
  events = events.split(" ");
  if(!window.documentSynchCalls){
    window.documentSynchCalls = 0;
  }

  for(var i in events){
    document.addEventListener(events[i], function(){
      window.documentSynchCalls++;
      if( window.documentSynchCalls == events.length){
        callback();
      }
    });
  }
}

function initialize() {

  window.application = new Framework7({
    modalTitle: 'Framework7',
    material: true,
    pushState: true
  });

  var LibModule = ng.core.NgModule({
    imports: [ng.forms.FormsModule]
  }).Class({
    constructor: function() {

    }
  });

  var BodyComponent = ng.core.Component({
    selector: 'body',
    template: '<router-outlet></router-outlet>'
  }).Class({
    constructor: function() {}
  });

  var MainModule = ng.core.NgModule({
      imports: [
        ng.platformBrowser.BrowserModule,
        LibModule,
        Router()
      ],
      declarations: [
        BodyComponent,
        MainLayoutComponent(),
        HomePageComponent()
      ],
      bootstrap: [BodyComponent],
      providers: []
    })
    .Class({
      constructor: function() {}
    });

  ng.platformBrowserDynamic
    .platformBrowserDynamic()
    .bootstrapModule(MainModule);
}

document.addEventListener('deviceready', initialize);

function Router() {
  var router;
  router = ng.router.RouterModule.forRoot([{
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  }, {
    path: '',
    component: MainLayoutComponent(),
    children: [{
      path: 'home',
      component: HomePageComponent()
    }]
  }], {
    useHash: true
  });
  return router;
}

function NavIgnore() {
  return ng.core.Directive({
    selector: "[navIgnore]",
    host: { // tslint:disable-line:use-host-property-decorator
      '(click)': 'handleClick($event)',
    }
  }).Class({
    constructor: [ng.router.Router, function(router) {
      this.router = router;
    }],
    handleClick: function functionName($event) {
      var subscription = this.router.events.subscribe(function(routerEvent) {
        console.log(routerEvent);
        if (routerEvent instanceof ng.router.NavigationEnd) {
          subscription.unsubscribe();
        } else if (routerEvent instanceof ng.router.NavigationError || routerEvent instanceof ng.router.NavigationCancel) {
          subscription.unsubscribe();
        }
      });
      return false;
    }
  });
}


function Autocomplete() {
  return ng.core.Directive({
    selector: "[autocomplete]",
    inputs: ["autocomplete"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.autocomplete.input = this.$element;
      } else {
        this.autocomplete.opener = this.$element;
      };
      window.application.autocomplete(this.autocomplete);
    },
  });
}

function Calendar() {
  return ng.core.Directive({
    selector: "[calendar]",
    inputs: ["calendar"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      if (this.$element.tagName.toLowerCase() == 'input') {
        this.calendar.input = this.$element;
      } else {
        this.calendar.container = this.$element;
      };
      window.application.calendar(this.calendar);
    },
  });
}

function InfiniteScroll() {
  return ng.core.Directive({
    selector: "[infiniteScroll]",
    inputs: ["infiniteScroll"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      Dom7(this.$element).on('infinite', this.infiniteScroll);
    },
  });
}

function Picker() {
  return ng.core.Directive({
    selector: "[picker]",
    inputs: ["picker", "container"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      this.picker.input = this.$element;
      if (typeof this.container != "undefined") {
        this.picker.container = this.container;
      }
      window.application.picker(this.picker);
    }
  });
}

function Sortable() {
  return ng.core.Directive({
    selector: "[sortable]",
    inputs: ["sortable", "open", "close"]
  }).Class({
    constructor: [ng.core.ElementRef, function(element) {
      this.$element = element.nativeElement;
    }],
    ngOnInit: function() {
      Dom7(this.$element).on("open", this.open);
      Dom7(this.$element).on("close", this.close);
    }
  });
}

function MainLayoutComponent() {
  return ng.core.Component({
    templateUrl: "src/layout/main-layout/main-layout.html"
  }).Class({
    constructor: function() {

    },
    ngAfterViewInit: function() {
      window.application.addView('.view-main', {});
    }
  });
}

function HomePageComponent() {
  return ng.core.Component({
    templateUrl: "src/pages/home/home.html"
  }).Class({
    constructor: function() {
      
    }
  });
}
